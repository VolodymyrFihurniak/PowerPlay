// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String
  role         UserRole      @default(USER)
  reservations Reservation[]
  sessions     Session[]
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Computer {
  id            Int            @id @default(autoincrement())
  name          String
  status        ComputerStatus @default(AVAILABLE)
  reservations  Reservation[]
  sessions      Session[]
  computerGames ComputerGame[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Reservation {
  id         Int      @id @default(autoincrement())
  userId     Int
  computerId Int
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  computer Computer @relation(fields: [computerId], references: [id])
}

model Session {
  id         Int      @id @default(autoincrement())
  userId     Int
  computerId Int
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  computer Computer @relation(fields: [computerId], references: [id])
}

model Game {
  id            Int            @id @default(autoincrement())
  name          String
  genre         String
  computerGames ComputerGame[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ComputerGame {
  id         Int @id @default(autoincrement())
  computerId Int
  gameId     Int

  computer Computer @relation(fields: [computerId], references: [id])
  game     Game     @relation(fields: [gameId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ComputerStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
}
